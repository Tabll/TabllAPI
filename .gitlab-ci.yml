variables:
  MYSQL_DATABASE: project_name
  MYSQL_ROOT_PASSWORD: secret

stages:
  - testing
  - quality
  - production

  # Update packages
  # - apt-get update -yqq
  # Prep for Node
  # - apt-get install gnupg -yqq
  # Upgrade to Node 8
  # - curl -sL https://deb.nodesource.com/setup_8.x | bash -
  # Install dependencies
  # - apt-get install git nodejs libcurl4-gnutls-dev libicu-dev libmcrypt-dev libvpx-dev libjpeg-dev libpng-dev libxpm-dev zlib1g-dev libfreetype6-dev libxml2-dev libexpat1-dev libbz2-dev libgmp3-dev libldap2-dev unixodbc-dev libpq-dev libsqlite3-dev libaspell-dev libsnmp-dev libpcre3-dev libtidy-dev -yqq
  # Install php extensions
  # - docker-php-ext-install mbstring pdo_mysql curl json intl gd xml zip bz2 opcache
  # Install & enable Xdebug for code coverage reports
  # - pecl install xdebug
  # - docker-php-ext-enable xdebug
  # Install Composer and project dependencies.
  # - curl -sS https://getcomposer.org/installer | php
  # - php composer.phar install
  # Install Node dependencies.
  # comment this out if you don't have a node dependency
  # - npm install
  # Copy over testing configuration.
  # Don't forget to set the database config in .env.testing correctly

test:
  stage: testing
  tags:
    - test
  cache:
    paths:
      - vendor/
      - node_modules/
  script:
    # - ~/.composer/vendor/bin/phpcs --error-severity=1 --warning-severity=8 --extensions=php
    - cp .env.test .env
    - composer config repo.packagist composer https://mirrors.aliyun.com/composer/
    - composer install --ignore-platform-reqs --prefer-dist --no-scripts -o
#    - composer dump-autoload
#    - php artisan clear-compiled
    - php artisan config:cache
    - php artisan cache:clear
    - php artisan migrate
#    - vendor/bin/phpunit --coverage-text --colors=never
    - vendor/bin/paratest --coverage-text tests

code_quality:
  stage: quality
  tags:
    - quality
  image: docker:18.09
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  script:
  - VOLUME_PATH=/tmp/builds"$(echo $PWD | sed 's|^/[^/]*||')"
# 校验配置文件是否正常
#  - docker run --rm -v /tmp/cc:/tmp/cc -v $VOLUME_PATH:/code -v /var/run/docker.sock:/var/run/docker.sock codeclimate/codeclimate:0.85.11 validate-config
  - docker run --rm --env CODECLIMATE_CODE="$VOLUME_PATH" -v /tmp/cc:/tmp/cc -v $VOLUME_PATH:/code -v /var/run/docker.sock:/var/run/docker.sock codeclimate/codeclimate:0.85.11 analyze -f json > codeclimate.json || true
  artifacts:
    reports:
      codequality: codeclimate.json

sast:
  stage: quality
  image: registry.gitlab.com/gitlab-org/security-products/analyzers/phpcs-security-audit:2
  tags:
    - quality
  allow_failure: true
  script:
    - /analyzer run
  artifacts:
    reports:
      sast: "gl-sast-report.json"

dependency_scan:
  stage: quality
  image: registry.gitlab.com/gitlab-org/security-products/analyzers/gemnasium:2
  tags:
    - quality
  allow_failure: true
  script:
    - /analyzer run
  artifacts:
    reports:
      dependency_scanning: "gl-dependency-scanning-report.json"

# 部署至生产环境
deploy to production:
  stage: production
  tags:
    - production
  allow_failure: true
  before_script:
#    解决 Windows 乱码
    - chcp 65001
  script:
    - cd \
    - cd TabllAPI
    - git pull origin master
    - git checkout $env:ProductionBranch
    - composer install
    - php artisan config:clear
    - php artisan migrate --no-interaction --force
    - php artisan cache:clear
  when: manual
  only:
    refs:
      - master
