# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/php
image: php:latest

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
  - mysql:latest

variables:
  MYSQL_DATABASE: project_name
  MYSQL_ROOT_PASSWORD: secret

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
    - vendor/
    - node_modules/

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
before_script:
  - echo 'before_script Starting...'
  # apt install php composer

  # Update packages
  # - apt-get update -yqq
  # Prep for Node
  # - apt-get install gnupg -yqq
  # Upgrade to Node 8
  # - curl -sL https://deb.nodesource.com/setup_8.x | bash -
  # Install dependencies
  # - apt-get install git nodejs libcurl4-gnutls-dev libicu-dev libmcrypt-dev libvpx-dev libjpeg-dev libpng-dev libxpm-dev zlib1g-dev libfreetype6-dev libxml2-dev libexpat1-dev libbz2-dev libgmp3-dev libldap2-dev unixodbc-dev libpq-dev libsqlite3-dev libaspell-dev libsnmp-dev libpcre3-dev libtidy-dev -yqq
  # Install php extensions
  # - docker-php-ext-install mbstring pdo_mysql curl json intl gd xml zip bz2 opcache
  # Install & enable Xdebug for code coverage reports
  # - pecl install xdebug
  # - docker-php-ext-enable xdebug
  # Install Composer and project dependencies.
  # - curl -sS https://getcomposer.org/installer | php
  # - php composer.phar install
  # Install Node dependencies.
  # comment this out if you don't have a node dependency
  # - npm install
  # Copy over testing configuration.
  # Don't forget to set the database config in .env.testing correctly
  # DB_HOST=mysql
  # DB_DATABASE=project_name
  # DB_USERNAME=root
  # DB_PASSWORD=secret
  # - cp .env.testing .env
  # Run npm build
  # comment this out if you don't have a frontend build
  # you can change this to to your frontend building script like
  # npm run build
  # - npm run dev
  # Generate an application key. Re-cache.
  # - php artisan key:generate
  # - php artisan config:cache
  # Run database migrations.
  # - php artisan migrate
  # Run database seed
  # - php artisan db:seed

test:
  tags:
    - test

  script:
    # - ~/.composer/vendor/bin/phpcs --error-severity=1 --warning-severity=8 --extensions=php
    - cp .env.test .env
    - composer config repo.packagist composer https://mirrors.aliyun.com/composer/
    - composer install --prefer-dist --no-scripts -o
    # - php artisan optimize
    # - php artisan migrate
    # - php artisan db:seed

    - php artisan key:generate
    - php artisan config:cache
    - vendor/bin/phpunit --coverage-text --colors=never

    # run laravel tests
    # - php vendor/bin/phpunit --coverage-text --colors=never
    # 运行前端测试
    # 如果你有前端测试
    # 把它放到 package.json 脚本中
    # - npm test
